#!/bin/bash

# vim:se nu ai terse nows ts=4 sts=4 sw=4 expandtab nohlsearch:

# shellcheck disable=SC1091
source /etc/profile.d/last.sh

PROG=$(basename "${0}")

function usage() {
    module_include lib/ansi

    cat <<- EOF

    The LAST project uses specific (6-socket) IP power switches, with specific devices
     plugged into pre-defined sockets, reflected in the sockets' names.

    $(ansi_underline "Usage"):
        ${PROG} <switch-name> [<socket-name> ...]
            - Gets the values of the named socket(s) (default: all sockets)

        ${PROG} <switch-name> [<socket-name> ...] on|off|toggle
            - Turns ON, turns OFF or toggles the specified socket(s)

    $(ansi_bold "Notes"):
        - Power switches may be addressed either by their hostname or ip-address.
        - Valid <switch-name>s: pswitch02w, 02w, 2w, 11e, 05W, etc.
        - To get a list of the socket names on a specific switch use:

            \$ $(ansi_bold "${PROG} <switch-name> [show]")

EOF
}

function GET() {
    local url="${1}"
    local tmp
    local -i ret

    tmp=$(mktemp "/tmp/${PROG}.XXXXXX")
    timeout 2 wget --quiet -O - "${url}" > "${tmp}"
    ret=${?}
    if (( ret == 0 )) && [ -s "${tmp}" ]; then
	    cat "${tmp}"
    fi
    /bin/rm "${tmp}"
    return ${ret}
}

declare pswitch
declare sockets
declare value

if [ "${1}" = '-h' ] || [ "${1}" = "--help" ]; then
    usage
    exit 0
fi

# valid pswitch names: "{pswitch}0[1-9][ew] {pswitch}1[0-2][ew]"
 
name=${1,,}
name=${name#pswitch}
if [[ "${name}" == [1-9][ew] ]]; then
    name=pswitch0${name}
elif [[ "${name}" == 0[1-9][ew] ]]; then
    name=pswitch${name}
elif [[ "${name}" == 1[0-2][ew] ]]; then
    name=pswitch${name}
else
    echo "${PROG}: Invalid power switch name \"${name}\""
    exit 1
fi
pswitch="${name}"
shift 1

# East side sockets:
# #6 Camera NW
# #5 Camera SW
# #4 Computer E
# #3 Computer W
# West side sockets:
# #6 Camera NE
# #5 Camera SE
# #4 Mount

function map_socket_names() {
    local line name value index

    while read -r line; do
        name=${line%=*}
        index=${name#socket}
        value=${line#*=}
        echo "${sockets[${index}]}=${value}"
    done
}

#
# These two lists govern the socket-number <=> socket-name mappings.
#
declare -a west_sockets=( [0]=Socket0 [1]=Socket1 [2]=CompW   [3]=CompW [4]=CamSW [5]=CamNE )
declare -a east_sockets=( [0]=Socket0 [1]=Socket1 [2]=Socket2 [3]=Mount [4]=CamNE [5]=CamSE )

declare -a sockets
declare numeric_sockets op

if [[ "${pswitch}" == *e ]]; then
    sockets=( "${east_sockets[@]}" )
else
    sockets=( "${west_sockets[@]}" )
fi

declare valid_socket_name arg
while (( ${#} != 0 )); do
    arg=${1}
    valid_socket_name=false
    for ((i = 0; i < ${#sockets[*]}; i++ )); do
        if [ "${arg,,}" = "${sockets[${i}],,}" ]; then
            numeric_sockets+=${i}
            valid_socket_name=true
            break
        fi
    done

    if ! ${valid_socket_name}; then
        case ${arg,,} in
            on|off|toggle|show)
                op=${arg}
                break
                ;;
            *)
                echo "${PROG}: Invalid socket name or operation \"${1}\""
                exit 1
                ;;
        esac
    fi
    shift 1
done

if [ ! "${numeric_sockets}" ]; then
    numeric_sockets=012345  # all sockets are selected
fi

if [ ! "${op}" ]; then
    op=show                 # default op
fi

function set_sockets() {
    local value=${1}
    local -i i numerical_value

    case ${value} in
        on)
            numerical_value=1
            ;;
        off)
            numerical_value=0
            ;;
    esac

    for (( i = 0; i < ${#numeric_sockets}; i++ )); do
        sock=${numeric_sockets:i:1}
        GET "${url_root}/outs.cgi?out${sock}=${numerical_value}" || return ${?}
    done
}

unset http_proxy
unset https_proxy

url_root=http://admin:admin@${pswitch}

case ${op} in
    show)
        GET "${url_root}/st0.xml" | \
            grep "out[${numeric_sockets}]" | \
            sed -e "s;<out\([${numeric_sockets}]\)>;socket\1=;" -e 's;</out.*;;' -e 's;=0;=off;' -e 's;=1;=on;' | \
            map_socket_names
        exit "${PIPESTATUS[0]}"
        ;;

    on|off)
        set_sockets ${op}
        ;;

    toggle)
        GET "${url_root}/outs.cgi?out=${numeric_sockets}"
        ;;
esac
