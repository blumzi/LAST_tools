#!/bin/bash

# vim:se nu ai terse nows ts=4 sts=4 sw=4 expandtab nohlsearch:

# shellcheck disable=SC1091
source /etc/profile.d/last.sh

module_include lib/http

PROG=$(basename "${0}")

function usage() {
    module_include lib/ansi

    cat <<- EOF

    The LAST project uses specific (6-socket) IP power switches, with specific devices
     plugged into pre-defined sockets, reflected in the sockets' names.

    $(ansi_underline "Usage"):
        ${PROG} <switch-name> [<socket-name> ...]
            - Gets the values of the named socket(s) (default: all sockets)

        ${PROG} <switch-name> [<socket-name> ...] on|off|toggle
            - Turns ON, turns OFF or toggles the specified socket(s)

    $(ansi_bold "Notes"):
        - Power switches may be addressed either by their hostname or ip-address.
        - Valid <switch-name>s: pswitch02w, 02w, 2w, 11e, 05W, etc.
        - To get a list of the socket names on a specific switch use:

            \$ $(ansi_bold "${PROG} <switch-name> [show]")

EOF
}

declare pswitch
declare sockets
declare value

if [ "${1}" = '-h' ] || [ "${1}" = "--help" ]; then
    usage
    exit 0
fi

# valid pswitch names: "{pswitch}0[1-9][ew] {pswitch}1[0-2][ew]"
 
name=${1,,}
name=${name#pswitch}
if [[ "${name}" == [1-9][ew] ]]; then
    name=pswitch0${name}
elif [[ "${name}" == 0[1-9][ew] ]]; then
    name=pswitch${name}
elif [[ "${name}" == 1[0-2][ew] ]]; then
    name=pswitch${name}
else
    echo "${PROG}: Invalid power switch name \"${name}\""
    exit 1
fi
pswitch="${name}"
shift 1

#
# These two lists govern the socket-number <=> socket-name mappings.
#
declare -a west_sockets=( [1]=Socket0 [2]=Socket1 [3]=CompW   [4]=CompW [5]=CamSW [6]=CamNE )
declare -a east_sockets=( [1]=Socket0 [2]=Socket1 [3]=Socket2 [4]=Mount [5]=CamNE [6]=CamSE )

declare -a sockets
declare numeric_sockets op

if [[ "${pswitch}" == *e ]]; then
    sockets=( "${east_sockets[@]}" )
else
    sockets=( "${west_sockets[@]}" )
fi

declare valid_socket_name arg
nsockets=${#sockets[*]}
while (( ${#} != 0 )); do
    arg=${1}

    if [[ "${arg}" == [1-6] ]]; then
        selected_sockets+=${arg}
        shift 1
        continue
    fi

    case ${arg,,} in
        on|off|toggle|show)
            op=${arg}
            break
            ;;
        *)
            echo "${PROG}: Invalid socket name or operation \"${1}\""
            exit 1
            ;;
    esac
    shift 1
done

if [ ! "${selected_sockets}" ]; then
    selected_sockets=123456
fi

if [ ! "${op}" ]; then
    op=show                 # default op
fi

function set_sockets() {
    local value=${1}
    local -i i numerical_value

    case ${value} in
        on)
            numerical_value=1
            ;;
        off)
            numerical_value=0
            ;;
    esac

    for s in $(echo "${lowered_sockets}" | sed -e 's;\(.\);\1 ;g'); do
        http_get "${url_root}/outs.cgi?out${s}=${numerical_value}" || return ${?}
    done
}

unset http_proxy
unset https_proxy

url_root=http://admin:admin@${pswitch}

for s in $(echo "${selected_sockets}" | sed -e 's;\(.\);\1 ;g'); do
    lowered_sockets+=$(( s - 1 ))
done

case ${op} in
    show)
        tmp=$(mktemp)
        http_get "${url_root}/st0.xml" > ${tmp}
        status=$?
        if (( ${status} != 0 )); then
            /bin/rm ${tmp}
            exit ${status}
        fi

        for ((i = 0; i < 6; i++)); do
            read line
            labels[${i}]="${line//\"/}"
        done < <(http_get "${url_root}/st2.xml" | grep -E '(r[6-9]|r1[0-1])' | sed -e 's;<r[0-9]*;;' -e 's;/.*;;' -e 's;[<>];\";g')

        for s in $(echo "${lowered_sockets}" | sed -e 's;\(.\);\1 ;g' ); do
            unshifted_socket=$((s + 1))
            line="$(grep "out[${s}]" ${tmp} | \
                sed -e "s;<out\([${s}]\)>;socket${unshifted_socket}=;" -e 's;</out.*;;' -e 's;=0;=off;' -e 's;=1;=on;' )"
            if [ "${labels[${s}]}" ]; then
                printf "%-15s # %s\n" "${line}" "$(echo ${labels[${s}]} | tr -d '"')"
            else
                echo ${line}
            fi
        done
        /bin/rm ${tmp}
        exit "${PIPESTATUS[0]}"
        ;;

    on|off)
        set_sockets ${op}
        ;;

    toggle)
        http_get "${url_root}/outs.cgi?out=${lowered_sockets}"
        ;;
esac
