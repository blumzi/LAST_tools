#!/bin/bash

source /etc/profile.d/last.sh

module_include lib/message
module_include sections/user

PROG=$(basename "${0}")

declare -A git_repo git_branch
git_repo["AstroPack"]="https://github.com/EranOfek/AstroPack.git"
git_repo["MAAT"]="https://github.com/EranOfek/MAAT.git"
git_repo["LAST/LAST_iOptronCEM120"]="https://github.com/EastEriq/LAST_iOptronCEM120.git"
git_repo["LAST/LAST_tinycontrolIPpowerSocket"]="https://github.com/EastEriq/LAST_tinycontrolIPpowerSocket.git"
git_repo["LAST/LAST_ZWOASICamera"]="https://github.com/EastEriq/LAST_ZWOASICamera.git"
git_repo["LAST/LAST_CelestronFocusMotor"]="https://github.com/EastEriq/LAST_CelestronFocusMotor.git"
git_repo["LAST/LAST_USBserial"]="https://github.com/EastEriq/LAST_USBserial.git"
git_repo["LAST/LAST_QHYccd"]="https://github.com/EastEriq/LAST_QHYccd.git"
git_repo["LAST/LAST_XerxesMount"]="https://github.com/EastEriq/LAST_XerxesMount.git"
git_repo["LAST/LAST_OCS"]="https://github.com/PolishookDavid/LAST_OCS.git"
git_repo["LAST/LAST_Messaging"]="https://github.com/EastEriq/LAST_Messaging.git"
git_repo["LAST/LAST_EnvironmentArduinoSensors"]="https://github.com/EastEriq/LAST_EnvironmentArduinoSensors.git"
git_repo["LAST/LAST_MountArduinoSensors"]="https://github.com/EastEriq/LAST_MountArduinoSensors.git"
git_repo["LAST/LAST_AtikCamera"]="https://github.com/EastEriq/LAST_AtikCamera.git"
git_repo["LAST/LAST_config"]="https://github.com/EranOfek/LAST_config.git"
git_repo["LAST/LAST_Handle"]="https://github.com/EastEriq/LAST_Handle.git"
git_repo["pipeLAST"]="https://github.com/EranOfek/pipeLAST.git"

git_branch["AstroPack"]="dev1"
git_branch["MAAT"]="master"
git_branch["LAST/LAST_iOptronCEM120"]="mastrolindo"
git_branch["LAST/LAST_tinycontrolIPpowerSocket"]="master"
git_branch["LAST/LAST_ZWOASICamera"]="mastrolindo"
git_branch["LAST/LAST_CelestronFocusMotor"]="mastrolindo"
git_branch["LAST/LAST_USBserial"]="master"
git_branch["LAST/LAST_QHYccd"]="mastrolindo"
git_branch["LAST/LAST_XerxesMount"]="mastrolindo"
git_branch["LAST/LAST_OCS"]="mastrolindo"
git_branch["LAST/LAST_Messaging"]="main"
git_branch["LAST/LAST_EnvironmentArduinoSensors"]="master"
git_branch["LAST/LAST_MountArduinoSensors"]="master"
git_branch["LAST/LAST_AtikCamera"]="main"
git_branch["LAST/LAST_config"]="mastrolindo"
git_branch["LAST/LAST_Handle"]="mastrolindo"
git_branch["pipeLAST"]="main"

function sorted_repos() {
    declare -a sorted

    sorted=( "$( for i in ${!git_repo[*]}; do echo ${i}; done | sort)" )
    echo "${sorted[@]}"
}

function help() {
    cat << EOF

    This tool clones (or pulls) the LAST software from git.

    Usage: ${PROG} [-d|--dir path] [-t|--token <token>] [-c|--check]
           ${PROG} --help

     -c|--check:         check only, don't enforce
     -d|--dir <path>:    fetch into the specified path (default: current directory)
     -t|--token <token>: specifies a github token (mandatory, no default)
     -h|--help:          show this help

     NOTE: This tool must be run as ${user_last}

     The following directories will contain the respective repo contents:

EOF
    list_repos
    echo ""
}

function list_repos() {
    local key

    #for key in ${!git_repo[*]}; do
    for key in $( sorted_repos ); do
        printf "       %-35s %s\n" "${key}" "${git_repo[${key}]#*@}"
    done
}

OPTS=$( getopt -o 'hd:clt:T:' --long "help,dir:,check,list,token:,token-file:" -n "${PROG}" -- "$@" )
eval set -- "${OPTS}"

top_dir=""
check=false
while true; do
	case "${1}" in

    -d|--dir)
        top_dir="${2}"
        shift 2
        ;;

    -h|--help)
        help
        exit 0
        ;;

    -c|--check)
        check=true
        shift 1
        ;;

    -l|--list)
        list_repos
        exit 0
        ;;

    -t|--token)
        if [ -s "${2}" ]; then
            github_token=$(< "${2}" )
        elif [ "${2}" ]; then
            github_token="${2}"
        else
            message_fatal "The github token must be either a non-empty string or a file containing the token itself"
        fi
        shift 2
        ;;

    -T|--token-file)
        if [ ! -s "${2}" ]; then
            message_fatal "Missing or empty token file \"${2}\"."
            exit 1
        fi
        github_token=$(< "${2}")
        shift 2
        ;;

	--)
		shift 1
		break
		;;
	esac
done

if [ "$(id -un)" != "${user_last}" ]; then
    echo "${PROG}: Must run as user \"${user_last}\", exiting"
    exit 1
fi

if ${check}; then
    if [ ! -d "${top_dir}" ]; then
        message_fatal "No such directory \"${top_dir}\""
        exit 1
    fi

    declare -i errors=0
    cd "${top_dir}" || exit 1
    for dir in $( sorted_repos ); do
        if [ -d "${dir}" ] && [ -d "${dir}/.git" ]; then
            pushd "${dir}" >/dev/null || true
            git status >/dev/null 2>&1
            status=$?
            if (( status == 0 )); then
                message_success "Repository \"${dir}\" is OK"
            else
                message_failure "Git status on repository \"${dir}\" failed (status: ${status})"
                (( errors++ ))
            fi
            popd >/dev/null || true
        else
            message_failure "Missing local repository ${dir}"
            (( errors++ ))
        fi
    done
    exit $(( errors ))
fi

# enforce
if [ ! "${github_token}" ]; then
    message_fatal "Missing github token.  Use -t|--token <token> to specify one"
    exit 1
fi

if [ ! -d "${top_dir}" ]; then
    mkdir -p "${top_dir}"
fi
cd "${top_dir}" || exit 1

declare repo status url branch
for key in $( sorted_repos ); do
    path=${key}
    repo=${git_repo[${key}]}
    if [ ! -d "${path}/.git" ]; then
        mkdir -p "${path}"
        pushd "$(dirname "${path}")" >/dev/null || continue
        url="${repo/github/${github_token}@github}"
        git clone "${url}" >/dev/null 2>&1
        status=$?
        if [ "${status}" -eq 0 ]; then
            message_success "Cloned \"${repo}\" into \"${path}\"."
            branch="${git_branch["${key}"]}"
            if [ "${branch}" ]; then
                pushd "$(basename "${path}")" >/dev/null || true
                git checkout "${branch}" >/dev/null 2>&1
                status=$?
                if (( status == 0 )); then
                    message_success "Switched to branch \"${branch}\" in \"${path}\"."
                else
                    message_failure "Could not switch to branch \"${branch}\" in \"${path}\" (status: ${status})"
                fi
                popd >/dev/null || true
            fi
        else
            message_failure "Could not clone \"${repo}\" into \"${path}\" (status: ${status})"
        fi
        popd >/dev/null || continue
    else
        pushd "${path}" >/dev/null || continue
        git pull >/dev/null
        status=$?
        if (( status == 0 )); then
            message_success "Pulled from \"${repo}\" into \"${path}\"."
        else
            message_failure "Could not pull from \"${repo}\" into \"${path}\" (status: ${status})"
        fi
        popd >/dev/null || continue
    fi
done

