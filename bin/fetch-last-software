#!/bin/bash

# env | grep LAST
source /etc/profile.d/last.sh

module_include lib/message

PROG=$(basename "${0}")
#last_user="ocs"
last_user="blumzi"
token="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"

declare -A git_repo
#git_repo["AstroPack"]="https://${token}@github.com/EranOfek/AstroPack.git"
git_repo["MAAT"]="https://${token}@github.com/EranOfek/MAAT.git"
git_repo["LAST/LAST_iOptronCEM120"]="https://${token}@github.com/EastEriq/LAST_iOptronCEM120.git"
git_repo["LAST/AstroPack"]="https://${token}@github.com/EranOfek/AstroPack.git"
git_repo["LAST/LAST_tinycontrolIPpowerSocket"]="https://${token}@github.com/EastEriq/LAST_tinycontrolIPpowerSocket.git"
git_repo["LAST/LAST_ZWOASICamera"]="https://${token}@github.com/EastEriq/LAST_ZWOASICamera.git"
git_repo["LAST/LAST_CelestronFocusMotor"]="https://${token}@github.com/EastEriq/LAST_CelestronFocusMotor.git"
git_repo["LAST/LAST_USBserial"]="https://${token}@github.com/EastEriq/LAST_USBserial.git"
git_repo["LAST/LAST_QHYccd"]="https://${token}@github.com/EastEriq/LAST_QHYccd.git"
git_repo["LAST/LAST_XerxesMount"]="https://${token}@github.com/EastEriq/LAST_XerxesMount.git"
git_repo["LAST/LAST_OCS"]="https://${token}@github.com/PolishookDavid/LAST_OCS.git"
git_repo["LAST/LAST_Messaging"]="https://${token}@github.com/EastEriq/LAST_Messaging.git"
git_repo["LAST/LAST_EnvironmentArduinoSensors"]="https://${token}@github.com/EastEriq/LAST_EnvironmentArduinoSensors.git"
git_repo["LAST/LAST_MountArduinoSensors"]="https://${token}@github.com/EastEriq/LAST_MountArduinoSensors.git"
git_repo["LAST/LAST_AtikCamera"]="https://${token}@github.com/EastEriq/LAST_AtikCamera.git"
git_repo["LAST/LAST_config"]="https://${token}@github.com/EranOfek/LAST_config.git"
git_repo["LAST/LAST_Handle"]="https://${token}@github.com/EastEriq/LAST_Handle.git"
git_repo["pipeLAST"]="https://${token}@github.com/EranOfek/pipeLAST.git"
git_repo["MAATn/imClass"]="https://${token}@github.com/EranOfek/imClass.git"

function help() {
    cat << EOF

    This tool clones (or pulls) the LAST software from git.

    Usage: ${PROG} [-d|--dir path]
           ${PROG} --help

     -d|--dir <path>: fetch into the specified path (default: current directory)
     -h|--help:       show this help

     NOTE: This tool must be run as ${last_user}

     The following directories will contain the respective repo contents:

EOF
    token=""
    for key in ${!git_repo[*]}; do
        printf "       %-35s %s\n" "${key}" "${git_repo[${key}]#*@}"
    done
    echo ""
}

OPTS=$( getopt -o 'hd:c' --long "h,dir:,check" -n "${PROG}" -- "$@" )
eval set -- "${OPTS}"

top_dir=""
check=false
while true; do
	case "${1}" in

    -d|--dir)
        top_dir="${2}"
        shift 2
        ;;

    -h|--help)
        help
        exit 0
        ;;

    -c|--check)
        check=true
        shift 1
        ;;

	--)
		shift 1
		break
		;;
	esac
done

if [ "$(id -un)" != "${last_user}" ]; then
    echo "${PROG}: Must run as ${last_user}, exiting"
    exit 1
fi

if ${check}; then
    if [ ! -d "${top_dir}" ]; then
        message_fatal "No such directory \"${top_dir}\""
        exit 1
    fi

    cd "${top_dir}" || exit
    for dir in ${!git_repo[*]}; do
        echo -e "\n${PROG}: Checking \"${dir}\" ..."
        pushd ${dir} >/dev/null || true
        git status
        popd >/dev/null || true
    done
    exit 0
fi

if [ ! -d "${top_dir}" ]; then
    mkdir -p "${top_dir}"
    cd "${top_dir}" || exit 1
fi


for key in ${!git_repo[*]}; do
    path=${key}
    if [ ! -d ${path}/.git ]; then
        mkdir -p ${path}
        pushd "$(dirname ${path})" >/dev/null || continue
        git clone ${git_repo[${key}]}
        popd >/dev/null || continue
    else
        pushd "${path}" >/dev/null || continue
        echo git pull
        popd >/dev/null || continue
    fi
done

