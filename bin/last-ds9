#!/bin/bash

source /etc/profile.d/last.sh
module_include lib/message

PROG=$(basename "${0}")

function kill_ds9s() {
	kill %1 %2
}

trap kill_ds9s SIGINT SIGTERM

declare -A geometry

top_margin=50
bot_margin=50
hsep=10
wsep=10
title_height=120

if !  read -r _ dimensions _ <<< "$(xdpyinfo | grep dimensions:)"; then
	message_fatal "Could not get display info (DISPLAY=${DISPLAY})"
fi

read -r W H <<< "$(echo "${dimensions}" | tr x ' ')"
h=$(( H - (top_margin + bot_margin + hsep) - (title_height) ))
w=$(( W / 3 ))

orig_x=$((W - (2 * (wsep + w) ) ))
orig_y=${hsep}
geometry[w]=${w}x${h}+$((orig_x))+$((orig_y))
geometry[e]=${w}x${h}+$((orig_x + w + wsep))+$((orig_y))

this_host=$(hostname -s)
this_side=${this_host:${#this_host}-1:1}
if [ ${this_side} = e ]; then
    peer_side=w
else
    peer_side=e
fi
peer_host=${this_host%${this_side}}${peer_side}
mount=${this_host#last}
mount=${mount%${this_side}}

this_geometry=${geometry[${this_side}]}
peer_geometry=${geometry[${peer_side}]}

function help() {
    {
        echo ""
        echo "This utility opens ds9 viewer(s) for the images produced by the LAST"
        echo " cameras of the current mount."
        echo ""
        echo "The last-ds9-feeder service wathches for new images being created and"
        echo " feeds them to the relevant ds9 viewer."
        echo ""
        echo "Usage: ${PROG} [-h|--help] [-v|--verbose]"
        echo ""
        echo "Flags:"
        echo " -h|--help:      Show this message and exit"
        echo " -v|--verbose:   Print file names as they are processed"
        echo ""
    } | sed 's;^;    ;'
}

function verbose() {
    local text="${*}"

    if ${verbose}; then
        echo "${PROG}: ${text}" >&2
    fi
}


OPTS=$( getopt -o 'hv' --long "help,verbose" -n "${PROG}" -- "$@" )
eval set -- "${OPTS}"

verbose=false
while true; do
    case "${1}" in

    -h|--help)
        help
        exit 0
        ;;

    -v|--verbose)
        verbose=true
        shift 1
        ;;

    --)
        shift 1
        break
        ;;
    esac
done

hostname=$(hostname -s)
if [[ "${hostname}" != last*[ew] ]]; then
    verbose "Host \"${hostname}\" is neither an east nor a west host, bailing out!"
    exit 1
fi

xpa_script="tile yes; tile mode row; frame 2; frame 1"

children=()
# this host
verbose "Opening ds9 viewer for the \"${this_side}\" side (${this_host})"
children+=( ${!} )
ds9 -title ${this_host} -geometry ${this_geometry} &
while [ $(xpaaccess -cn ${this_host}) -lt 1 ]; do
	sleep 1
done
echo "${xpa_script}" | xpaset ${this_host}

# peer_host
if  >/dev/null 2>&1 ssh -n -o "ConnectTimeout 2" ${peer_host} id; then
    verbose "Opening ds9 viewer for the \"${peer_side}\" side (${peer_host})"
    ssh -X ${peer_host} -n -o "ConnectTimeout 5" \
        "ds9 -title ${peer_host} -geometry ${peer_geometry}" &
    children+=( ${!} )
    ssh    ${peer_host} -n -o "ConnectTimeout 5" \
        "while [ \$(xpaaccess -cn ${peer_host}) -lt 1 ]; do sleep 1; done; echo '${xpa_script}' | xpaset ${peer_host}"
else
    message_warning "No connection to peer host (${peer_host})"
fi

wait