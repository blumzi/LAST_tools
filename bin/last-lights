#!/bin/bash

# vim:se nu ai terse nows ts=4 sts=4 sw=4 expandtab nohlsearch:

# shellcheck disable=SC1091
source /etc/profile.d/last.sh

PROG=$(basename "${0}")

function usage() {
    module_include lib/ansi

    cat <<- EOF

    At the LAST observatory (Neot Smadar) we have some lights controlled by 
     remote controlled power switches.

    This tool controls the power switches and lets the user:
     - Get the status of the sockets where the lights are connected
     - Turn ON/OFF the lights, either all at once or just the specified list.

    $(ansi_underline "Usage"):
        ${PROG} <power-switch-name>
            - Gets the current status of the light hooked to the specified power-switch

        ${PROG} on|off [[<power-switch-name>] ... ]
            - Turn On or OFF either ALL the lights (when no power-swithces are specified)
               or just on the power-switches specified as arguments.

    $(ansi_bold "Notes"):
        - Power switches may be addressed either by their hostname or ip-address.
        - Valid <switch-name>s: pswitch02w, 02w, 2w, 11e, 05W, etc.

EOF
}


declare -A known_light_sockets=(
    ["02e"]=6 ["pswitch02e"]=6 ["10.23.2.3"]=6
    ["02w"]=1 ["pswitch02w"]=1 ["10.23.2.4"]=1
    ["08e"]=2 ["pswitch08e"]=2 ["10.23.2.16"]=2
    
)

function all_switches() {
    declare all=()

    for key in ${!known_light_sockets[*]}; do
        if [[ ${key} == pswitch* ]]; then
            all+=( ${key} )
        fi
    done

    echo ${all[*]}
}

declare pswitch
declare sockets
declare value

action=''
if [ "${1}" = '-h' ] || [ "${1}" = "--help" ]; then
    usage
    exit 0
elif [ "${1}" = 'on' ]; then
    action=on
    shift 1
elif [ "${1}" = 'off' ]; then
    action=off
    shift 1
fi

# valid pswitch names: "{pswitch}0[1-9][ew] {pswitch}1[0-2][ew]"
 
selected_power_switches=()

while [ ${#} -gt 0 ]; do
    name=${1,,}
    name=${name#pswitch}
    if [[ "${name}" == [1-9][ew] ]]; then
        name=pswitch0${name}
    elif [[ "${name}" == 0[1-9][ew] ]]; then
        name=pswitch${name}
    elif [[ "${name}" == 1[0-2][ew] ]]; then
        name=pswitch${name}
    else
        echo "${PROG}: Invalid power switch name \"${name}\""
        exit 1
    fi

    known=false
    for key in ${!known_light_sockets[*]}; do
        if [ "${name}" = "${key}" ]; then
            known=true
            break
        fi
    done

    if ! ${known}; then
        echo "${PROG}: No lights on power switch \"${name}\". Use one of: ${!known_light_sockets[*]}"
        exit 1
    fi

    selected_power_switches+=( ${name} )
    shift 1
done

if [ ${#selected_power_switches[*]} -eq 0 ]; then
    selected_power_switches=( $(all_switches) )
fi

for pswitch in ${selected_power_switches[*]}; do
    socket=${known_light_sockets[${pswitch}]}
    if [ "${action}" = "" ]; then
        echo ${pswitch} $(last-pswitch ${pswitch} ${socket})
    else
        last-pswitch ${pswitch} ${socket} ${action}
    fi
done
