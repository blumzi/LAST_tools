#!/bin/bash

. /etc/profile.d/last.sh

PROG="$(basename ${0})"
trap "exit 1" SIGINT

module_include lib/util

util_log_invokation ${*}

function usage() {
    echo ""
    echo "  Usage: ${PROG} [-t|--timeout seconds] [-u|--units|--units-only] [[-H|--host <host>] ...] -c|--cmd|--command command"
    echo ""
    echo "  Runs the specified command as ocs"
    echo "   on the specified hosts (default: $(echo ${default_hosts[@]} | tr ' ' ','))"
    echo ""
}

OPTS=$( getopt -o 'H:hc:t:u' --long "help,host:,cmd:,command:,timeout:,units,units-only" -n "${PROG}" -- "$@" )
eval set -- "${OPTS}"

default_hosts=( $(last-hosts --deployed) )
timeout=2
units_only=false

hosts=()
while true; do
    case "${1}" in
    -u|--units|--units-only)
        units_only=true
        shift 1
        ;;

    -h|--help)
        usage
        exit 0
        ;;

    -H|--host)
        hosts+=( ${2} )
        shift 2
        ;;

    -c|--cmd|--command)
        cmd="${2}"
        shift 2
        ;;

    -t|--timeout)
        timeout="${2}"
        shift 2
        ;;

	--)
		shift 1
		break
		;;
    esac
done

if [ ! "${hosts[*]}" ]; then
    hosts=( ${default_hosts[*]} )
fi

if ${units_only}; then
    units=()
    for h in ${hosts[*]}; do
        if [ ${h} != last0 ]; then
            units+=( ${h} )
        fi
    done
    hosts=( ${units[*]} )
fi
        

if [ ! "${cmd}" ]; then
    cmd="${@}"
fi

if [ ! "${cmd}" ]; then
    usage
    exit 1
fi

module_include lib/message

for host in ${hosts[*]}; do
    message_section "${host}"
    err=$(mktemp)
    ssh -o "ConnectTimeout=${timeout}" -X ocs@${host} "${cmd}" 2>${err}
    status=${?}
    if [ ${status} -eq 255 ]; then
        message_failure "ssh failure (status=${status}, err=\"$(tr -d '\r' <  ${err})\")"
    fi
    /bin/rm ${err}
done
