#!/bin/bash

function kill_ds9s() {
    kill %1 %2 %3 %4
}

trap kill_ds9s SIGTERM

east_host=$(find / -maxdepth 1 -type d -name "last[0-1][0-9]e")
west_host=$(find / -maxdepth 1 -type d -name "last[0-1][0-9]w")

declare -A tops=(
    [ne]=${east_host}/data1
    [se]=${east_host}/data2
    [nw]=${west_host}/data1
    [sw]=${west_host}/data2
)

declare -A geometry

top_margin=50
bot_margin=50
hsep=10
wsep=10
title_height=120

read -r _ dimensions _ <<< "$(xdpyinfo | grep dimensions:)"
read -r W H <<< "$(echo "${dimensions}" | tr x ' ')"
h=$(( (H - (top_margin + bot_margin + hsep) - (title_height)) / 2 ))
w=$(( h ))

orig_x=$((W - (2 * (wsep + w) ) ))
orig_y=${hsep}
geometry[nw]=${w}x${h}+$((orig_x))+$(( orig_y ))
geometry[sw]=${w}x${h}+$((orig_x))+$(( orig_y + (2 * hsep) + h + title_height ))
geometry[ne]=${w}x${h}+$((orig_x + w + wsep))+$(( orig_y ))
geometry[se]=${w}x${h}+$((orig_x + w + wsep))+$((orig_y + (2 * hsep) + h + title_height ))

function help() {
    {
        echo ""
        echo "This utility watches predefined directories for changed *.fits files and displays them"
        echo " in ds9 windows."
        echo ""
        echo "Usage: ${PROG} [-h|--help] [-v|--verbose]"
        echo ""
        echo "Watched directories:"
        echo ""
        printf "   %8s  %s\n" "Quadrant" "Directory"
        printf "   %8s  %s\n" "========" "========="
        for quad in ${!tops[*]}; do
            printf "   %2s       %8s\n" "${quad}" "${tops[${quad}]}"
        done
        echo ""
        echo "Flags:"
        echo " -h|--help:      Show this message and exit"
        echo " -v|--verbose:   Print file names as they are processed"
        echo ""
    } | sed 's;^;    ;'
}

function verbose() {
    local text="${*}"

    if ${verbose}; then
        echo "${PROG}: ${text}" >&2
    fi
}

function watcher() {
    local quadrant="${1}"
    local side="${quadrant:${#quadrant}-1:1}"

    if [ "$(xpaaccess -n "${quadrant}" g)" != 1 ]; then
        ds9 -title "${quadrant}" -geometry "${geometry[${quadrant}]}" &
    fi

    if [ "${side}" != "${watched_side}" ]; then
        return
    fi

    verbose "[${quadrant}]: watching ${tops[${quadrant}]}"
    # TODO: xpaset some initial state
    while read -r path; do
        verbose "[${quadrant}]: path: ${path}"
        if [[ "${path}" != *.fits ]]; then
            continue
        fi
        # shellcheck disable=SC2094
        xpaset "DS9:${quadrant}" fits "${path}" < "${path}"
    done < <(inotifywait --event close_write --monitor --recursive --format "%w%f" "${tops[${quadrant}]}" 2>/dev/null)
}

PROG=$(basename "${0}")
OPTS=$( getopt -o 'hv' --long "help,verbose" -n "${PROG}" -- "$@" )
eval set -- "${OPTS}"

verbose=false
while true; do
    case "${1}" in

    -h|--help)
        help
        exit 0
        ;;

    -v|--verbose)
        verbose=true
        shift 1
        ;;

    --)
        shift 1
        break
        ;;
    esac
done

hostname=$(hostname -s)
if [[ "${hostname}" != last*[ew] ]]; then
    verbose "Host \"${hostname}\" is neither an east nor a west host, bailing out!"
    exit 1
fi

watched_side=${hostname:${#hostname}-1:1}

for quadrant in ${!tops[*]}; do
    watcher "${quadrant}" &
done

wait
