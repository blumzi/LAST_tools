#!/bin/bash

PROG=$(basename ${0})
source /etc/profile.d/last.sh

module_include lib/const
module_include lib/message
module_include lib/backup

PROG=$(basename "${0}")
hostname="$(hostname -s)"
tops="/${hostname}/data[12]"

backup_set_target ${backup_default_target}

function usage() {
    cat <<- EOF

    The LAST pipeline generates products which need to be uploaded to WIS.  As soon as the pipeline 
     finishes working with a specific directory it adds a 'ready-for-transfer' event to the status-change
     file in that directory (a file named .status)

    This program runs as a long-term service.  It watches for changes to the .status files.  If a 
     'ready-for-transfer' line exists (but not a 'transfered' line), it initiates a transfer to the backup host.
     If the transfer succeeds, it adds a 'transfered' line to the .status file.

    This host:
        sources:      ${tops}

    Backup host:
        host:         ${backup_host}
        user:         ${backup_user}
        destination:  ${backup_topdir} 

EOF
}

function initiate_transfer() {
    local src="${1}"
    local rc cmd="last-backup --source=${src} --target=${backup_user}@${backup_host}:${backup_topdir}"

    message_info "Initiating \"${cmd}\""
    LAST_TOOL_QUIET=true ${cmd}
    rc=${?}

    if [ ${rc} -eq 0 ]; then
        echo "$(date --iso-8601=seconds) ${const_transfered}" >> ${status_file}
    fi

    return ${rc}
}


if [ "${1}" = '-h' ] || [ "${1}" = "--help" ]; then
    usage
    exit 0
fi

export RSYNC_RSH="ssh -T -c aes128-ctr -o Compression=no -x"

while read -r path; do
    if [[ "${path}" != */.status ]]; then
        continue
    fi

    if [[ "${path}" == *_re/* ]]; then  # skip Yarin's files
        continue
    fi

    status_file=${path}
    dir=$(dirname ${status_file})

    if [[ ${dir} == */raw ]]; then
        continue
    else
        #
        # proc directories get their files backed up, if not already transfered
        #
        if grep -qw "${const_ready_for_transfer}" "${status_file}" && ! grep -qw "${const_transfered}" "${status_file}"; then
            initiate_transfer "${dir}"
        fi
    fi

done < <(inotifywait --event close_write --monitor --recursive --format "%w%f" ${tops} 2>/dev/null)
