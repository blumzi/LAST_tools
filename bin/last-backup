#!/bin/bash


function cleanup() {
    local failures=( $(if [ -s ${tmp}/.failures ]; then cat ${tmp}/.failures 2>/dev/null; fi) )
    local running_processes=( $(jobs -pr) )

    if [ ${#running_processes[*]} -eq 0 ]; then
        if (( ${#failures[*]} == 0 )); then
            message_success "All chunks have been synchronized"
        else
            failures=( $(list_sort "${failures[@]}" ) )
            message_fatal "Chunks ${failures[*]} have failed to synchronize!"
        fi
    else
        message_info "Killing running process(es): ${running_processes[*]}"
        2>/dev/null kill -9 ${running_processes[*]} 
    fi
    /bin/rm -rf ${tmp}
    exit 0
}

trap cleanup SIGHUP SIGINT


PROG=$(basename ${0})
source /etc/profile.d/last.sh

module_include lib/message
module_include lib/util
module_include lib/list
module_include lib/backup

util_log_invokation ${*}

# defaults
identity=
default_nproc=10
rsync_extra_args="--exclude '*/raw/*'"
rsync_info_args="--info=STATS0 --info=FLIST0"
quiet=false

function usage() {
    cat <<- EOF

    Usage: ${PROG} -s|--source|-f|--from <source-directory> [ -t|--to|--target [<user@host>:]<target-directory> ]

    The <source-directory> will be recursivelly synchronized with the <target-directory>.
    Both source and target may reside on the current machine.

    This utility:
    - Uses an rsync 'dry-run' to get the list of out-of-date files
       between the source and the target directories (a workload list).
    - Splits the workload into chunks (maximum as many as the number of parallel processes)
    - Starts the relevant number of rsync processes, one-per-chunk
    - Waits for all the rsync processes to end.

    Arguments:
     -h|--help        - Show usage and exit
     -q|--quiet       - Be quiet
     -s|--source      - Specifies the source-directory
     -f|--from        - Specifies the source-directory
     -t|--to|--target - Specifies the target-directory (default: ${backup_default_target})
     -p|--processes   - Specifies the number of processes to use (default: ${default_nproc})
     -x|--extra       - Specifies additional arguments to rsync (e.g. --exclude=...)
     -c|--check       - Check if the source directory was backed up
     -r|--remove      - Remove source directory if it was backed up (only works with -c|--check or -C|--check-all)
     -F|--force       - Force removal of local directory (only works with -r|--remove)
     -C|--check-all   - Same as -c|--check but for all the local directories

EOF
}

OPTS=$( getopt -o 'qs:f:t:hi:p:xcrCF' --long "quiet:,help,extra:,processes:,identity:,force,source:,from:,to:,target:,check,remove,check-all" -n "${PROG}" -- "$@" )
eval set -- "${OPTS}"

check=false
check_all=false
remove=false
force=false
source=
target=

while true; do
	case "${1}" in

    -C|--check-all)
        check_all=true
        shift 1
        ;;

    -c|--check)
        check=true
        shift 1
        ;;

    -r|--remove)
        remove=true
        shift 1
        ;;

    -F|--force)
        force=true
        shift 1
        ;;

    -q|--quiet)
        quiet=true
        shift 1
        ;;

    -s|--source|-f|--from)
        source="$(realpath ${2})"
        shift 2
        ;;

    -t|--target|--to)
        if [[ ${2} != *@*:* ]]; then
            message_fatal "Bad target \"${2}\". It must have the format user-name@host-name:path-to-top-directory"
            exit 1
        fi
        target="${2}"
        shift 2
        ;;

    -h|--help)
        usage
        exit 0
        ;;

    -i|--identity)
        identity="${2}"
        shift 2
        ;;
    
    -p|--processes)
        nprocs="${2}"
        shift 2
        ;;
    
    -x|--extra)
        rsync_extra_args="${2}"
        shift 2
        ;;

	--)
		shift 1
		break
		;;
	esac
done

if ! ${check_all} && [ ! "${source}" ]; then
    message_fatal "Must specify a source directory with -s|--source|-f|--from <path>"
    usage
    exit 1
fi

if [ ! "${target}" ]; then
    target="${backup_default_target}"
fi

if ${quiet}; then
    export LAST_TOOL_QUIET=true
fi


if ! ${check_all}; then
    source=$(realpath ${source})
    if [ ! -d "${source}" ]; then
        message_failure "Bad source directory \"${source}\" (not a directory)"
        exit 1
    fi
fi


backup_set_target "${target}"

if [ ! "${nprocs}" ]; then
    nprocs=${default_nproc}
fi

tmp=$(mktemp -d)
chmod 755 ${tmp}
cd ${tmp}

files_list=files

data_dir=${source}
if [[ "${data_dir}"  == */archive/* ]]; then
    data_dir="${data_dir#*/archive/}"
fi

if ${check}; then
    backup_check_one "${source}"
    exit 0
fi

if ${check_all}; then
    backup_check_all
    exit 0
fi

message_info "Source: \"${source}\""
message_info "Target: \"${backup_target}/${data_dir}\""

message_info "Gathering list of files ..."

sudo -u ocs rsync -av ${rsync_info_args} --dry-run ${rsync_extra_args} ${source}/ ${backup_target}/${data_dir} | grep -v '\.\/' | grep -v 'created directory' > ${files_list}
if [ ${PIPESTATUS[0]} -ne 0 ]; then
    message_failure "Failed getting files list from ${backup_target}/${data_dir}"
    exit 1
fi

if (( $(wc -l < ${files_list}) == 0 )); then
    message_success "The source and target directories are synchronized"
    #cleanup
    exit 0
fi

message_info "Splitting workload among ${nproc} processes ..."
nlines=$( awk -v lines=$(wc -l < ${files_list}) -v nprocs=${nprocs} 'BEGIN {print int(lines/nprocs) + 1}' )
split --lines=${nlines} < ${files_list}
chunks=( x?? )

sudo -u ocs ssh -o "StrictHostKeyChecking accept-new" ${backup_user}@${backup_host} mkdir -p ${backup_topdir}/${data_dir}

for ((i = 0; i < ${#chunks[*]}; i++)); do
    (
        message_info "Synchronizing chunk #$((i+1)) (of ${#chunks[*]}) ..."
        stat_file=stat.${i}
        (sudo -u ocs rsync -aRz --stats --times ${rsync_extra_args} --files-from=${chunks[${i}]} ${source}/ ${backup_target}/${data_dir} 2>/dev/null ) > ${stat_file}
        status=${?}

        if [ "${status}" ] && [ ${status} -eq 0 ]; then
            Speedup=$(grep speedup ${stat_file}  | cut -d' ' -f8)
                Bps=$(grep '^sent ' ${stat_file} | cut -d' ' -f9 | tr -d ,)
               Mbps=$(awk -v Bps=${Bps} 'BEGIN { printf "%.3f\n", Bps / 125000 }')
            message_success "Chunk #$((i+1)) (of ${#chunks[*]}) succeeded (${Mbps} Mbps, speedup ${Speedup})"
        else
            # rsync returns 20 when killed
            if [ "${status}" != 20 ]; then
                message_failure "Chunk #$((i+1)) (of ${#chunks[*]}) failed with status: ${status}"
            fi
            echo ${i} >> ${tmp}/.failures
        fi
    ) &
done

wait
cleanup
