#!/bin/bash

export PS4='+ [$SHLVL,$BASH_SUBSHELL] [${BASH_SOURCE}:${BASH_LINENO[0]}:${FUNCNAME[0]}] '

export PROG
PROG=$(basename "${0}")
export LAST_TOOL_PID="${$}"

source lib/module.sh
module_include lib/message

function help() {
    cat << EOF

    This tool sets up the LAST installation on the current machine.

    Usage: ${PROG} config|check|start [-q|--quiet] [-H|--host <name>] [[[-s|--section <name>] ...]
           ${PROG} --show-sections
           ${PROG} --help

     The first argument selects the running mode:
        config:              manages configuration files for the selected sections
        check:               checks if the current state of the selected sections meets the requirements
        start:               runs code that enforces the requirements for the selected sections
        show:                only show some information

     -s|--section <section>: add <section> to the selection set
     -q|--quiet:             be silent

EOF
}

function show_info() {

    export LAST_TOOL_DONTLOG=true   # inform message_xxx not to log

    message_info ""
    message_info "Environment:"
    message_info "   LAST_TOOL_ROOT:  ${LAST_TOOL_ROOT}"
    message_info "   LAST_TOOL_QUIET: ${LAST_TOOL_QUIET}"
    message_info ""

    message_info ""
    message_info "Matlab:"
    message_info "   Version: ${LAST_TOOL_MATLAB_VERSION}"

    local keys_file
    keys_file="$(matlab_file_installation_keys)"
    if [ -r "${keys_file}" ]; then
        message_info "   Installation Keys File: ${keys_file}"
    else
        message_info "   Installation Keys File: Missing"
    fi
    
    local license_file
    license_file="$(matlab_license_file)"
    if [ -r "${license_file}" ]; then
        message_info "   License File: ${license_file}"
    else
        message_info "   License File: Missing"
    fi

    message_info "Sections:"
    message_info " Available:"
    for section in $( sections_registered_sections ); do
        message_info "$(printf '   %-10s %s\n' "${section}" "$(sections_section_description "${section}")")"
    done | sort

    message_info " Selected (ordered, including dependencies):"
    for section in "${needed_sections[@]}"; do
        message_info "$(printf '   %-10s %s\n' "${section}" "$(sections_section_description "${section}")")"
    done
}

function root_or_die() {
    if [ "$(id -un)" != root ]; then
        echo "${PROG}: Must be root to run this tool!"
        exit 1
    fi
}

case "${1}" in
    -h|--help)
        help
        exit 0
        ;;
    
    check|start|config|show)
        mode="${1}"
        shift 1
        ;;
esac

if [ ! "${mode}" ]; then
    message_failure "The first argument must select a running mode (check|start|config|show), see help below!"
    help
    exit 1
fi

export LAST_TOOL_MATLAB_VERSION=R2020b # default Matlab version

OPTS=$( getopt -o 'qs:M:' --long "quiet,section:,matlab-version:" -n "${PROG}" -- "$@" )
eval set -- "${OPTS}"

while true; do
	case "${1}" in

    -s|--section)
        selected_sections+=( "${2}" )
        shift 2
        ;;

    -q|--quiet)
        export LAST_TOOL_QUIET=true
        shift 1
        ;;
    
    -M|--matlab-version)
        export LAST_TOOL_MATLAB_VERSION="${2}"
        shift 2
        ;;

	--)
		shift 1
		break
		;;
	esac
done

#
# These modules will register sections
#
module_include sections/bios
module_include sections/user
module_include sections/packages
module_include sections/profile
module_include sections/hostname
module_include sections/apt
module_include sections/paths
module_include sections/matlab

read -r -a registered_sections <<< "$( sections_registered_sections )"

# No sections were specified, use all those defined
if [ ${#selected_sections[*]} -eq 0 ]; then
    selected_sections=( "${registered_sections[@]}" )
fi

# build a topologically sorted array of the needed section
read -r -a needed_sections <<< "$( sections_ordered_sections "${selected_sections[*]}" )"

case "${mode}" in
show)
    show_info
    exit 0
    ;;

check)
    export LAST_TOOL_DONTLOG=true
    ;;
esac

root_or_die

for section in "${needed_sections[@]}"; do
    if sections_section_has_method "${section}" "${mode}"; then
        eval "${section}_${mode}"
    else
        message_warning "Section \"${section}\" does not have a \"${section}_${mode}\" method, skipping"
    fi
done