#!/bin/bash

# SIGTERM is sent by message_fatal
trap "exit 1" SIGTERM SIGINT

#shellcheck source=/dev/null
source /etc/profile.d/last.sh

export PROG
PROG=$(basename "${0}")
export LAST_TOOL_PID="${$}"

module_include lib/message
module_include lib/macmap
module_include lib/container

module_include lib/container
module_include lib/util

util_test_and_set_http_proxy

declare mode

function list_sections() {
    message_info "$(printf '   %-20s %-64s %s\n' "Section" "Description" "Requires")"
    message_info "$(printf '   %-20s %-64s %s\n' "-------" "-----------" "--------")"
    for section in $( sections_registered_sections ); do
        message_info "$(printf '   %-20s %-64s %s\n' "${section}" "$(sections_section_description "${section}")" "$(sections_section_requires "${section}")" )"
    done | sort
}

function global_help() {
    # shellcheck disable=SC2154
    cat << EOF

    The LAST installation policy is $(ansi_bold "anything and everything") that differentiates a LAST installation
     from a vanilla Ubuntu installation (network, packages, matlab, LAST software, etc.)

    This tool either checks or makes (enforces) the LAST installation policy.

    Usage: ${PROG} [[flag] ...] <mode> [[section] ...] 

     Flags:
     -h|--help:        show this help and exit
     -v|--version:     show version and exit
     -i|--info:        show info and exit
     -q|--quiet:       be silent (default: verbose)
     -n|--nodeps:      don't do section dependencies (default: dependant sections will be added)
     -c|--container:   select a LAST container (default: first valid container in LAST_CONTAINER_PATH, currently "$(container_path)"))

     Running <mode>:
      One running <mode> must be selected from the following (no default):
        check:                Checks if the current machine complies with the LAST installation policy
        enforce|make:         Enforces the LAST installation policy upon the current machine
        show-env|env:         Shows some information about the available installation resources
        show-policy|policy:   Prints out the LAST policy for the seected section(s)
        list-sections:        Just list all the available sections

     Sections:
      The workload is split into (possibly inter-dependant) sections.
      - To get a list of the defined sections run:
          $ $(ansi_bold "${PROG} list-sections")
      - To select a subset of all the defined sections, just list them as arguments
         after the running <mode> (default: run all the defined sections)

EOF
}

function help() {
	local -a sections

    message_section "Global help"
    global_help

    if [ ${#selected_sections[*]} -ne 0 ]; then
		sections=( "${selected_sections[@]}" )
	else
		sections=( "${registered_sections[@]}" )
	fi

	for section in "${sections[@]}"; do
		eval section_helper="$(util_bashify "${section}")_helper"
        # shellcheck disable=SC2154
		if typeset -f "${section_helper}" >/dev/null 2>&1; then
			message_section "${section}"
			${section_helper}
		fi
	done
}

function show_environment() {
    local msg

    export LAST_TOOL_DONTLOG=true   # inform message_xxx not to log

    message_section "Environment:"
    message_info " LAST_MODULE_INCLUDE_PATH: ${LAST_MODULE_INCLUDE_PATH}"
    message_info "          LAST_TOOL_QUIET: ${LAST_TOOL_QUIET}"

    module_include lib/container

    local -a last_container_path=( ${LAST_CONTAINER_PATH//:/ } )
    message_section "Container(s):"
    message_info "      Path: ${LAST_CONTAINER_PATH}"
    message_info "   Default: ${last_container_path[0]}"
    message_info "  Selected: ${container_selected:-No selected container}"

    local matlab_release
    matlab_release=$(matlab_installed_release)
    matlab_release=${matlab_release:-None}
    message_section "Matlab:"
    message_info "      Installed: ${matlab_release}"
    
    local -a available_matlabs available_matlab_dirs
    if [ "${container}" ]; then
        read -r -a matlabs <<< "$(cd "${container}/matlab" || exit; echo R*)"
        for matlab in "${matlabs[@]}"; do
            if [ -r "${container}/matlab/${matlab}/disk1.iso" ] && [ -r "${container}/matlab/${matlab}/disk2.iso" ]; then
                available_matlabs+=( "${matlab}" )
                available_matlab_dirs+=( "${container}/matlab/${matlab}" )
            fi
        done

        if [ ${#available_matlabs[*]} -gt 0 ]; then
            for (( i = 0 ; i < ${#available_matlabs[*]}; i++ )); do
                message_info "   Available: ${available_matlabs[i]} in ${available_matlab_dirs[i]}"
            done
        else
            message_info "   Available: None"
        fi
    fi

    local license_file account="40558509"
    license_file="/usr/local/MATLAB/${matlab_release}/licenses/license_$(hostname -s)_${account}_${matlab_release}.lic"
    msg="   License File: "       
    if [ -r "${license_file}" ]; then
        msg+="${license_file}"
    else
        msg+="Missing"
    fi
    message_info "${msg}"

    message_section "Sections:"
    message_info " Available:"
    list_sections

    message_info ""
    message_info " In order of execution: (considering requirements)"
    message_info "$(printf '   %-20s %-64s\n' "Section" "Description")"
    message_info "$(printf '   %-20s %-64s\n' "-------" "-----------")"
    for section in $(sections_ordered_sections "${registered_sections[*]}"); do
        message_info "$(printf '   %-20s %s\n' "${section}" "$(sections_section_description "${section}")")"
    done

    local mac ipaddr hostname
    mac="$(macmap_get_local_mac)"
    if [ ! "${mac}" ]; then
        message_fatal "Cannot get local MAC with macmap_get_local_mac"
    fi
    ipaddr="$(macmap_get_local_ipaddr)" || message_fatal "Cannot get IP address for local mac: ${mac}"
    hostname="$(macmap_get_local_hostname)" || message_fatal "Cannot get hostname for local mac: ${mac}"
    message_section "Network:"
    message_info "   MAC:        ${mac:-Could not get it}"
    message_info "   IP address: ${ipaddr:-Could not get it}"
    message_info "   hostname:   ${hostname:-Could not get it}"
}

function root_or_die() {
    if [ "$(id -un)" != root ]; then
        echo "${PROG}: Must be root to run this tool!"
        exit 1
    fi
}

function show_info() {
    local info_file
    info_file=$(module_locate files/info)

    if [ ! -r "${info_file}" ]; then
        message_fatal "Cannot locate the version info file."
    fi

    cat "${info_file}"
}

function show_version() {
    read _ _ version _ <<< $(dpkg -l | grep last-tool )
    echo ${version}
}

declare mode
declare nodeps=false

#
# These modules will register sections
#
module_include sections/bios
module_include sections/user
module_include sections/ubuntu-packages
module_include sections/ubuntu-services
module_include sections/profile
module_include sections/hostname
module_include sections/apt
module_include sections/matlab
module_include sections/filesystems
module_include sections/time
module_include sections/catalogs
module_include sections/last-software
module_include sections/ssh
module_include sections/postgres
module_include sections/sensors
module_include sections/images
module_include sections/logs

read -r -a registered_sections <<< "$( sections_registered_sections )"

function shiftARGV() {
    local -i n="${1}"
    local -a argv=()
    local -i i

    for (( i = n; i < ${#ARGV[*]}; i++)); do
        argv+=( "${ARGV[${i}]}" )
    done
    ARGV=( "${argv[@]}" )
}

#
# We allow each section to have an argument parser. The parser should consume the arguments
#  it has used and return the remaining ones.
#
#  For each known section
#    If it has a parser; 
#     remaining_args=$( section-arg-parser current-args )
#    End if
#  End for
#

declare -a ARGV=()
ARGV=( "${@}" )

declare parser valid_section
while [ "${#ARGV[@]}" -gt 0 ]; do
	case "${ARGV[0]}" in
		-h|--help)
			help
			exit 0
			;;
		
		-q|--quiet)
			export LAST_TOOL_QUIET=true
			shiftARGV 1
			continue
			;;

		-n|--nodeps)
			nodeps=true
			shiftARGV 1
			continue
			;;

		-c|--container)
			container_selected="${ARGV[1]}"
			shiftARGV 2
			continue
			;;

        -i|--info)
            show_info
            exit 0
            ;;

        -v|--version)
            show_version
            exit 0
            ;;

		*)
			break
			;;
	esac
done

# done with global flags, expect the mode
case "${ARGV[0]}" in
	check)
		mode="${ARGV[0]}"
		shiftARGV 1
		;;

	make|enforce)
		mode=enforce
		shiftARGV 1
		;;

	show-env|env)
		show_environment
		exit 0
		;;

	show-policy|policy)
		mode=policy
		shiftARGV 1
		;;

	sections)
		sections_registered_sections
		exit 0
		;;

	list-sections)
		list_sections
		exit 0
		;;

esac

if [ ! "${mode}" ]; then
	help
	message_fatal "No mode was selected"
fi

# mode was selected, this starts the sections and their flags

while [ ${#ARGV[*]} -ne 0 ]; do
    valid_section=false
    for section in "${registered_sections[@]}"; do
        if [ "${ARGV[0]}" = "${section}" ]; then
            valid_section=true
            selected_sections+=( "${ARGV[0]}" )
            shiftARGV 1
            eval parser="$(util_bashify "${section}")_arg_parser"
            if typeset -f "${parser}" >/dev/null 2>&1; then
                ${parser} "${ARGV[@]}"
                break # for loop
            fi
        fi
    done
    if ! ${valid_section}; then
        message_fatal "Unknown section \"${ARGV[0]}\"."
    fi
done

# No sections were specified, use all those defined
if [ ${#selected_sections[*]} -eq 0 ]; then
    selected_sections=( "${registered_sections[@]}" )
fi

declare -a needed_sections
if ${nodeps}; then
    needed_sections=( "${selected_sections[@]}" )
else
    # build a topologically sorted array of the needed section
    # typeset -p needed_sections
    read -r -a needed_sections <<< "$( sections_ordered_sections "${selected_sections[*]}" )"
    # typeset -p needed_sections
fi

case "${mode}" in
check)
    export LAST_TOOL_DONTLOG=true
    ;;

enforce)
    :
    ;;
esac

if [ "${mode}" != policy ]; then
    root_or_die
fi

declare bashified_section
for section in "${needed_sections[@]}"; do
    bashified_section="$(util_bashify "${section}")"
    method="${bashified_section}_${mode}"

    if sections_section_has_method "${bashified_section}" "${mode}"; then
        message_section "${section^?}"
        eval "${method}"
    else
        message_warning "Section \"${section}\" does not have a \"${method}\" method, skipping"
    fi
done
